Scenario 1:

CREATE OR REPLACE PROCEDURE SafeTransferFunds (p_fromAccountID IN NUMBER, p_toAccountID IN NUMBER, p_amount IN NUMBER) IS
    insufficient_funds EXCEPTION;
    v_balance NUMBER;
BEGIN
    SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_fromAccountID;
    
    IF v_balance < p_amount THEN
        RAISE insufficient_funds;
    ELSE
        UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_fromAccountID;
        UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_toAccountID;
        COMMIT;
    END IF;
    
EXCEPTION
    WHEN insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the source account.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


Scenario 2:

CREATE OR REPLACE PROCEDURE UpdateSalary (p_employeeID IN NUMBER, p_percentage IN NUMBER) IS
    employee_not_found EXCEPTION;
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM Employees WHERE EmployeeID = p_employeeID;
    
    IF v_count = 0 THEN
        RAISE employee_not_found;
    ELSE
        UPDATE Employees
        SET Salary = Salary * (1 + p_percentage / 100)
        WHERE EmployeeID = p_employeeID;
        COMMIT;
    END IF;
    
EXCEPTION
    WHEN employee_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


Scenario 3:

CREATE OR REPLACE PROCEDURE AddNewCustomer (p_customerID IN NUMBER, p_name IN VARCHAR2, p_dob IN DATE, p_balance IN NUMBER) IS
    duplicate_customer EXCEPTION;
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM Customers WHERE CustomerID = p_customerID;
    
    IF v_count > 0 THEN
        RAISE duplicate_customer;
    ELSE
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
        VALUES (p_customerID, p_name, p_dob, p_balance, SYSDATE);
        COMMIT;
    END IF;
    
EXCEPTION
    WHEN duplicate_customer THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer already exists.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


